#!/bin/bash

# Cd into our working directory in case we're not into it already
cd "$(dirname "$0")";

echo "----------------------------------------------------------------------------------------------"
echo "icon-eps: Starting processing of icon-eu model data - `date`"
echo "----------------------------------------------------------------------------------------------"

# Folder to be used to download and process data
export MODEL_DATA_FOLDER="/home/ekman/ssd/guido/icon-eu-eps/"
export HOME_FOLDER=$(pwd)
export N_CONCUR_PROCESSES=12 # not used anymore as it needs to be tuned per case
export NCFTP_BOOKMARK="mid"
DATA_DOWNLOAD=true
DATA_PLOTTING=true
DATA_UPLOAD=true

##### LOAD functions to download model data
. ./functions_download_dwd.sh
export SHELL=$(type -p bash)
# We need to open many files at the same time
ulimit -Sn 8192

# Retrieve run ##########################
latest_run=`python get_last_run.py`
if [ -f $MODEL_DATA_FOLDER/last_processed_run.txt ]; then
	latest_processed_run=`while read line; do echo $line; done < $MODEL_DATA_FOLDER/last_processed_run.txt`
	if [ $latest_run -gt $latest_processed_run ]; then
		echo "New run ${latest_run} found! Last processed run was ${latest_processed_run}."
	else
		echo "Run ${latest_processed_run} already processed, exiting"
		exit 0
	fi
fi

export year=${latest_run:0:4} 
export month=${latest_run:4:2} 
export day=${latest_run:6:2} 
export run=${latest_run:8:2}

echo "Processing run ${latest_run}"

###########################################

mkdir -p ${MODEL_DATA_FOLDER}it
mkdir -p ${MODEL_DATA_FOLDER}de

# Move to the data folder to do processing
cd ${MODEL_DATA_FOLDER} || { echo 'Cannot change to DATA folder' ; exit 1; }

# SECTION 1 - DATA DOWNLOAD ############################################################

if [ "$DATA_DOWNLOAD" = true ]; then
	echo "----------------------------------------------------------------------------------------------"
	echo "icon-eps: Starting downloading of data - `date`"
	echo "----------------------------------------------------------------------------------------------"
	# Remove older files
	rm ${MODEL_DATA_FOLDER}*.nc
	rm ${MODEL_DATA_FOLDER}*.idx
	rm ${MODEL_DATA_FOLDER}*.grib2

	# Invariant
	download_invariant_icon_eu_eps

	#2-D variables
	# note that for some reason snow_gsp and snow_con only have all timesteps for 00 and 12 runs
	# so for all other runs less timesteps will be present in the output    
	variables=("t_2m" "clct" "snow_gsp" "snow_con" "tot_prec" "vmax_10m")
	parallel -j 2 --delay 1 download_merge_2d_variable_icon_eu_eps ::: "${variables[@]}"

	download_merge_3d_variable_icon_eu_eps t
fi 

############################################################

# SECTION 2 - DATA PLOTTING ############################################################

if [ "$DATA_PLOTTING" = true ]; then
	echo "----------------------------------------------------------------------------------------------"
	echo "icon-eps: Starting plotting of data - `date`"
	echo "----------------------------------------------------------------------------------------------"
	python --version
	cp ${HOME_FOLDER}/plotting/*.py ${MODEL_DATA_FOLDER}

	export QT_QPA_PLATFORM=offscreen # Needed to avoid errors when using Python without display

	# python plot_meteogram.py

	scripts=("plot_max_gust.py" "plot_tot_prec.py" "plot_snow.py" "plot_clouds.py" "plot_tmax.py")

	projections=("euratl" "it" "de")

	parallel -j 4 python ::: "${scripts[@]}" ::: "${projections[@]}"
	rm ${MODEL_DATA_FOLDER}*.py
fi

############################################################

# If we at least produced some netcdf and images we assume the run is succesfull and 
# store the run processed in a text file. Unfortunately there is no easy way to check
# if the processing is really succesfull as we have many errors in the process that
# don't undermine the whole processing! 

N_NETCDF_FILES=`find . -type f -name '*.nc' -printf x | wc -c`
N_IMAGES=`find . -type f -name '*.png' -printf x | wc -c`

if [ $N_NETCDF_FILES -ge 2 ] && [ $N_IMAGES -ge 10 ]; then
	echo ${latest_run} > last_processed_run.txt
fi


# SECTION 3 - IMAGES UPLOAD ############################################################
# Use ncftpbookmarks to add a new FTP server with credentials
if [ "$DATA_UPLOAD" = true ]; then
	echo "----------------------------------------------------------------------------------------------"
	echo "icon-eps: Starting FTP uploading - `date`"
	echo "----------------------------------------------------------------------------------------------"
	# First upload meteograms
	#ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} icon_eu_eps meteogram_*
	#
	# Then upload the other pictures
	#
	images_output=("prob_prec_50" "prob_winds_50" "prob_snow" "prob_clouds" "prob_tmax")

	# suffix for naming
	projections_output=("" "it/" "de/")
	# remote folder on server
	projections_output_folder=("icon_eu_eps" "icon_eu_eps/it" "icon_eu_eps/de")

	# Create a lisf of all the images to upload 
	upload_elements=()
	for i in "${!projections_output[@]}"; do
		for j in "${images_output[@]}"; do
				upload_elements+=("${projections_output_folder[$i]}/${j} ./${projections_output[$i]}${j}_*")
		done
	done

	num_procs=5
	num_iters=${#upload_elements[@]}
	num_jobs="\j"  # The prompt escape for number of jobs currently running
	for ((i=0; i<num_iters; i++)); do
		while (( ${num_jobs@P} >= num_procs )); do
		wait -n
		done
	ncftpput -R -v -DD -m ${NCFTP_BOOKMARK} ${upload_elements[$i]} &
	done
fi 

############################################################

# SECTION 4 - CLEANING ############################################################

echo "----------------------------------------------------------------------------------------------"
echo "icon-eps: Finished cleaning up - `date`"
echo "----------------------------------------------------------------------------------------------"

############################################################

cd -
